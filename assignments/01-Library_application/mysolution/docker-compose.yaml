version: "3.7"
services:
  #
  #Book Microservice
  #
  book-ms:
    build:
      context: ./book
    container_name: book-ms
    ports:
      - "8122:8122"
    depends_on:
      - mongodb_db

  mongodb_db:
    image: mongo:latest
    container_name: book-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: book_db
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db
  
  #
  # Customer Microservice
  # 
  customer-ms:
    build:
      context: ./customer
    container_name: customer-ms
    ports:
      - "8123:8123"
    depends_on:
      - mongodb_db

  mongodb_db:
    image: mongo:latest
    container_name: customer-mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: root
      MONGO_INITDB_DATABASE: customer_db
    ports:
      - 27017:27017
    volumes:
      - mongodb_data:/data/db

  #
  # Borrowing Microservice
  #
  borrowing-ms:
    build:
      context: ./borrowing
    container_name: borrowing-ms
    ports:
      - "8124:8124"
    depends_on:
      - postgres_db

  postgres_db:
    image: postgres:latest
    container_name: borrowing-postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./borrowing/dbinit.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres

  #
  # Notification
  #
  notification-ms:
    build:
      context: ./notification
    container_name: notification-ms
    ports:
      - "8125:8125"
    depends_on:
      - kafka

  zookeeper:
    image: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      zk_id: "1"

  kafka:
    image: bitnami/kafka
    container_name: kafka
    hostname: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      ALLOW_PLAINTEXT_LISTENER: "yes"

  #
  # logging
  #

  elasticsearch:
    build:
      context: elasticsearch/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: elasticsearch
    volumes:
      - type: bind
        source: ./elasticsearch/config/elasticsearch.yml
        target: /usr/share/elasticsearch/config/elasticsearch.yml
        read_only: true
      - type: volume
        source: elasticsearch
        target: /usr/share/elasticsearch/data
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: "-Xmx256m -Xms256m"
      ELASTIC_PASSWORD: changeme
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
  
  #
  # logstash
  #

  logstash:
    build:
      context: logstash/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: logstash
    volumes:
      - type: bind
        source: ./logstash/config/logstash.yml
        target: /usr/share/logstash/config/logstash.yml
        read_only: true
      - type: bind
        source: ./logstash/pipeline
        target: /usr/share/logstash/pipeline
        read_only: true
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    depends_on:
      - elasticsearch

  #
  # kibana
  #

  kibana:
    build:
      context: kibana/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: kibana
    volumes:
      - type: bind
        source: ./kibana/config/kibana.yml
        target: /usr/share/kibana/config/kibana.yml
        read_only: true
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch

  #
  # filebeat
  #

  filebeat:
    build:
      context: filebeat/
      args:
        ELK_VERSION: $ELK_VERSION
    container_name: filebeat
    volumes:
      - type: bind
        source: ./filebeat/config/filebeat.yml
        target: /usr/share/filebeat/filebeat.yml
        read_only: true
      - filebeat:/usr/share/filebeat/data
      # This is needed for filebeat to load container log path as specified in filebeat.yml
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
    environment:
      - ELASTICSEARCH_HOST=${ELASTICSEARCH_HOST:-elasticsearch}
      - KIBANA_HOST=${KIBANA_HOST:-kibana}
      - ELASTICSEARCH_USERNAME=${ELASTICSEARCH_USERNAME:-elastic}
      - ELASTICSEARCH_PASSWORD=${ELASTICSEARCH_PASSWORD:-changeme}
    command: "filebeat -strict.perms=false -c /usr/share/filebeat/filebeat.yml"
    user: root
    depends_on:
      - logstash

  


volumes:
 mongodb_data: {}
 postgres_data: {}
 elasticsearch: {}
 filebeat: {}
